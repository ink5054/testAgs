"use strict";
const postcss = require("postcss");
const plugin = 'postcss-nested-vars';
const PostCssNestedVars = postcss.plugin(plugin, (options = {}) => {
    options.logLevel = options.logLevel || 'error';
    const errorContext = { plugin };
    const specialSearchValue = /\$\(([\w\d-_]+)\)/g;
    const logMap = {
        error(message, node) {
            throw node.error(message, errorContext);
        },
        warn(message, node, result) {
            node.warn(result, message);
        },
        silent() {
            // noop
        }
    };
    const log = logMap[options.logLevel];
    if (!log) {
        throw new Error(`Invalid logLevel: ${options.logLevel}`);
    }
    const globals = {};
    if (options.globals) {
        Object.keys(options.globals).forEach(key => {
            globals[key] = [options.globals[key]];
        });
    }
    return (root, result) => {
        walk(root, result, globals);
    };
    function walk(container, result, vars) {
        const containerVars = {};
        container.walk(node => {
            if (node.type === 'rule') {
                resolveContainer(node, 'selector');
                return;
            }
            if (node.type === 'atrule') {
                resolveContainer(node, 'params');
                return;
            }
            if (node.type === 'decl') {
                resolveDeclaration(node);
                return;
            }
        });
        Object.keys(containerVars).forEach(varName => {
            vars[varName].pop();
        });
        function resolveContainer(container2, prop) {
            if (container2[prop].indexOf('$(') !== -1) {
                replaceAllVars(container2, prop, specialSearchValue);
            }
            walk(container2, result, vars);
        }
        function resolveDeclaration(decl) {
            if (decl.prop.indexOf('$(') !== -1) {
                replaceAllVars(decl, 'prop', specialSearchValue);
            }
            if (/^\$(?!\()/.test(decl.prop)) {
                const m = decl.prop.match(/^\$([\w\d-_]+)$/);
                const varName = m && m[1];
                const stack = vars[varName];
                if (!stack) {
                    vars[varName] = [];
                }
                if (!containerVars[varName]) {
                    containerVars[varName] = true;
                    vars[varName].push(decl.value);
                }
                else {
                    stack[stack.length - 1] = decl.value;
                }
                decl.remove();
                return;
            }
            if (decl.value.indexOf('$') !== -1) {
                replaceAllVars(decl, 'value', /\$([\w\d-_]+)/g);
            }
        }
        function replaceAllVars(obj, prop, searchValue) {
            obj[prop] = obj[prop].replace(searchValue, (m, varName) => {
                const stack = vars[varName];
                if (!stack || !stack.length) {
                    log(`Undefined variable: ${varName}`, obj, result);
                    return `$${varName}`;
                }
                return stack[stack.length - 1];
            });
        }
    }
});
module.exports = PostCssNestedVars;
//# sourceMappingURL=plugin.js.map